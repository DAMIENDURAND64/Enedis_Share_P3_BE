// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(uuid())
  role Role @default(USER)
  profilePic String
  firstname String
  lastname String
  team String?
  workLocation String
  birthday DateTime @db.Date
  email String @unique
  hashedPassword String
  files File[]
  posts Post[]
  isDisabled Boolean
  spaces Space[]
  categories Category[]
  comments Comment[]
  sites Site[]
  site_permissions SitePermission[]
  post_permissions PostPermission[]
  category_permissions CategoryPermission[]
  space_permissions SpacePermission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SitePermission {
  id String @id @default(uuid())
  name Permission @default(READ)
  read Boolean @default(false)
  write Boolean @default(false)
  update Boolean @default(false)
  delete Boolean @default(false)
  own Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  userId String
  site Site @relation(fields: [siteId],references: [id])
  siteId String
}

model PostPermission {
  id String @id @default(uuid())
  name Permission @default(READ)
  read Boolean @default(false)
  write Boolean @default(false)
  update Boolean @default(false)
  delete Boolean @default(false)
  own Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId],references: [id])
  postId String
}

model CategoryPermission {
  id String @id @default(uuid())
  name Permission @default(READ)
  read Boolean @default(false)
  write Boolean @default(false)
  update Boolean @default(false)
  delete Boolean @default(false)
  own Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  userId String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model SpacePermission {
  id String @id @default(uuid())
  name Permission @default(READ)
  read Boolean @default(false)
  write Boolean @default(false)
  update Boolean @default(false)
  delete Boolean @default(false)
  own Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  userId String
  space Space @relation(fields: [spaceId], references: [id])
  spaceId String
}  

model Site {
  id String @id @unique @default(uuid())
  name String @unique
  user User @relation(fields: [userId], references: [id])
  spaces Space[]
  userId String
  permissions SitePermission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Space {
  id String @id @unique @default(uuid())
  name String @unique
  site Site @relation(fields: [siteId], references: [id])
  siteId String
  owner User @relation(fields: [ownerId],references: [id])
  ownerId String
  permissions SpacePermission[]
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @unique @default(uuid())
  name String @unique
  space Space @relation(fields: [spaceId], references: [id])
  spaceId String
  owner User @relation(fields: [ownerId],references: [id])
  ownerId String
  permissions CategoryPermission[]
  posts Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @unique @default(uuid())
  title String
  content String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  author User @relation(fields: [authorId], references: [id])
  authorId String
  files File[]
  comments Comment[]
  permissions PostPermission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @unique @default(uuid())
  content String @unique
  post Post @relation(fields: [postId], references: [id])
  postId String
  author User @relation(fields: [authorId],references: [id])
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id String @id @unique @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId],references: [id])
  postId String
  name String
  url String
  format String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum Permission {
  WRITE
  READ
  UPDATE
  DELETE
}